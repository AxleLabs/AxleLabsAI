#!/usr/bin/env bash

set -o errexit
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker compose "${DC}" ${TTY} "${@}"
}

function _build_run_down {
  docker compose build
  docker compose run ${TTY} "${@}"
  docker compose down
}

function _test_cmd {
  . .env
  _dc -e POSTGRES_DB="${POSTGRES_DB}_test" web "${@}"
}


# -----------------------------------------------------------------------------

function cmd {
  # Run any command you want in the web container
  _dc web "${@}"
}

function flask {
  # Run any Flask commands
  cmd flask "${@}"
}

function lint:dockerfile {
  # Lint Dockerfile
  docker container run --rm -i \
    hadolint/hadolint hadolint --ignore DL3008 -t style "${@}" - < Dockerfile
}

function lint {
  # Lint Python code
  cmd flake8 "${@}"
}

function format:imports {
  # Sort Python imports
  cmd isort . "${@}"
}

function format {
  # Format Python code
  cmd black . "${@}"
}

function quality {
  # Perform all code quality commands together
  format:imports
  format
  lint
}

function test:unit {
  # Run unit tests
  cmd pytest tests/unit/ "${@}"
}

function test {
  # Run migrations
  _test_cmd flask db migrate

  # Run all tests
  _test_cmd pytest tests/ "${@}"
}

function test:coverage {
  # Run migrations
  _test_cmd flask db migrate

  # Get test coverage
  _test_cmd pytest --cov tests/ --cov-report term-missing "${@}"
}

function shell {
  # Start a shell session in the web container
  cmd bash "${@}"
}

function psql {
  # Connect to PostgreSQL
  . .env
 _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

function pip3:install {
  # Install pip3 dependencies and write lock file
  _build_run_down web bin/pip3-install
}

function pip3:outdated {
  # List any installed packages that are outdated
  cmd pip3 list --outdated
}

function ci:install-deps {
  # Install Continuous Integration (CI) dependencies
  sudo curl \
    -L https://raw.githubusercontent.com/nickjj/wait-until/v0.2.0/wait-until \
    -o /usr/local/bin/wait-until && sudo chmod +x /usr/local/bin/wait-until
}

function ci:test {
  # Execute Continuous Integration (CI) pipeline

  lint:dockerfile "${@}"

  cp -n .env.example .env

  docker compose build
  docker compose up -d

  . .env
  wait-until "docker compose exec -T \
    -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
    psql -U ${POSTGRES_USER} ${POSTGRES_USER} -c 'SELECT 1'"

  docker compose logs

  lint "${@}"
  format:imports --check
  format --check
  flask db reset --with-testdb
  test "${@}"
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"